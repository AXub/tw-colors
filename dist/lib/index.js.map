{"version":3,"sources":["../../lib/index.ts"],"sourcesContent":["import Color from 'color';\r\nimport plugin from 'tailwindcss/plugin';\r\nimport forEach from 'lodash.foreach';\r\nimport flatten from 'flat';\r\n\r\ninterface MaybeNested<K extends keyof any = string, V = string> {\r\n   [key: string]: V | MaybeNested<K, V>;\r\n}\r\n\r\nconst SCHEME = Symbol('color-scheme');\r\nconst VAR_PREFIX = 'twc';\r\n\r\nexport type Colors = MaybeNested<string, string>;\r\n\r\nexport interface ColorsWithScheme<T> extends Colors {\r\n   [SCHEME]?: T;\r\n}\r\n\r\ninterface FlatColorsWithScheme<T> extends Record<string, string> {\r\n   [SCHEME]?: T;\r\n}\r\n\r\ntype SchemerFn<T> = (colors: Colors) => ColorsWithScheme<T>;\r\n\r\nconst dark: SchemerFn<'dark'> = (colors) => {\r\n   return {\r\n      [SCHEME]: 'dark',\r\n      ...colors,\r\n   };\r\n};\r\n\r\nconst light: SchemerFn<'light'> = (colors) => {\r\n   return {\r\n      [SCHEME]: 'light',\r\n      ...colors,\r\n   };\r\n};\r\n\r\nexport type ConfigObject = Record<string, ColorsWithScheme<'light' | 'dark'>>;\r\nexport type ConfigFunction = ({\r\n   light,\r\n   dark,\r\n}: {\r\n   light: SchemerFn<'light'>;\r\n   dark: SchemerFn<'dark'>;\r\n}) => ConfigObject;\r\n\r\nexport const resolveConfig = (config: ConfigObject | ConfigFunction = {}) => {\r\n   const resolved: {\r\n      variants: { name: string; definition: string[] }[];\r\n      utilities: Record<string, Record<string, string>>;\r\n      colors: Record<\r\n         string,\r\n         ({\r\n            opacityValue,\r\n            opacityVariable,\r\n         }: {\r\n            opacityValue: string;\r\n            opacityVariable: string;\r\n         }) => string\r\n      >;\r\n   } = {\r\n      variants: [],\r\n      utilities: {},\r\n      colors: {},\r\n   };\r\n   const configObject = typeof config === 'function' ? config({ dark, light }) : config;\r\n\r\n   forEach(configObject, (colors: ColorsWithScheme<'light' | 'dark'>, themeName: string) => {\r\n      const cssSelector = `.theme-${themeName},[data-theme=\"${themeName}\"]`;\r\n\r\n      resolved.utilities[cssSelector] = colors[SCHEME]\r\n         ? {\r\n              'color-scheme': colors[SCHEME],\r\n           }\r\n         : {};\r\n\r\n      // flatten color definitions\r\n      const flatColors: FlatColorsWithScheme<'light' | 'dark'> = flatten(colors, {\r\n         safe: true,\r\n         delimiter: '-',\r\n      });\r\n\r\n      // resolved.variants\r\n      resolved.variants.push({\r\n         name: `theme-${themeName}`,\r\n         definition: [`&.theme-${themeName}`, `&[data-theme='${themeName}']`],\r\n      });\r\n\r\n      forEach(flatColors, (colorValue, colorName) => {\r\n         // this case was handled above\r\n         if ((colorName as any) === SCHEME) return;\r\n         const [h, s, l, defaultAlphaValue] = Color(colorValue).hsl().round().array();\r\n         const twcColorVariable = `--${VAR_PREFIX}-${colorName}`;\r\n         const twcOpacityVariable = `--${VAR_PREFIX}-${colorName}-opacity`;\r\n         // set the css variable in \"@layer utilities\"\r\n         resolved.utilities[cssSelector]![twcColorVariable] = `${h} ${s}% ${l}%`;\r\n         // if an alpha value was provided in the color definition, store it in a css variable\r\n         if (typeof defaultAlphaValue === 'number') {\r\n            resolved.utilities[cssSelector]![twcOpacityVariable] = defaultAlphaValue.toFixed(2);\r\n         }\r\n         // set the dynamic color in tailwind config theme.colors\r\n         resolved.colors[colorName] = ({ opacityVariable, opacityValue }) => {\r\n            // if the opacity is set  with a slash (e.g. bg-primary/90), use the provided value\r\n            if (!isNaN(+opacityValue)) {\r\n               return `hsl(var(${twcColorVariable}) / ${opacityValue})`;\r\n            }\r\n            // if no opacityValue was provided (=it is not parsable to a number)\r\n            // the twcOpacityVariable (opacity defined in the color definition rgb(0, 0, 0, 0.5)) should have the priority\r\n            // over the tw class based opacity(e.g. \"bg-opacity-90\")\r\n            // This is how tailwind behaves as for v3.2.4\r\n            if (opacityVariable) {\r\n               return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, var(${opacityVariable})))`;\r\n            }\r\n            return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, 1))`;\r\n         };\r\n      });\r\n   });\r\n\r\n   return resolved;\r\n};\r\n\r\nexport const createThemes = (config: ConfigObject | ConfigFunction = {}) => {\r\n   const resolved = resolveConfig(config);\r\n\r\n   return plugin(\r\n      ({ addUtilities, addVariant }) => {\r\n         // add the css variables to \"@layer utilities\"\r\n         addUtilities(resolved.utilities);\r\n         // add the theme as variant e.g. \"theme-[name]:text-2xl\"\r\n         resolved.variants.forEach((variant) => {\r\n            addVariant(variant.name, variant.definition);\r\n         });\r\n      },\r\n      // extend the colors config\r\n      {\r\n         theme: {\r\n            extend: {\r\n               // @ts-ignore\r\n               colors: resolved.colors,\r\n            },\r\n         },\r\n      },\r\n   );\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,oBAAmB;AACnB,oBAAoB;AACpB,kBAAoB;AAMpB,IAAM,SAAS,OAAO,cAAc;AACpC,IAAM,aAAa;AAcnB,IAAM,OAA0B,CAAC,WAAW;AACzC,SAAO;AAAA,IACJ,CAAC,MAAM,GAAG;AAAA,IACV,GAAG;AAAA,EACN;AACH;AAEA,IAAM,QAA4B,CAAC,WAAW;AAC3C,SAAO;AAAA,IACJ,CAAC,MAAM,GAAG;AAAA,IACV,GAAG;AAAA,EACN;AACH;AAWO,IAAM,gBAAgB,CAAC,SAAwC,CAAC,MAAM;AAC1E,QAAM,WAaF;AAAA,IACD,UAAU,CAAC;AAAA,IACX,WAAW,CAAC;AAAA,IACZ,QAAQ,CAAC;AAAA,EACZ;AACA,QAAM,eAAe,OAAO,WAAW,aAAa,OAAO,EAAE,MAAM,MAAM,CAAC,IAAI;AAE9E,oBAAAA,SAAQ,cAAc,CAAC,QAA4C,cAAsB;AACtF,UAAM,cAAc,UAAU,0BAA0B;AAExD,aAAS,UAAU,WAAW,IAAI,OAAO,MAAM,IAC1C;AAAA,MACG,gBAAgB,OAAO,MAAM;AAAA,IAChC,IACA,CAAC;AAGN,UAAM,iBAAqD,YAAAC,SAAQ,QAAQ;AAAA,MACxE,MAAM;AAAA,MACN,WAAW;AAAA,IACd,CAAC;AAGD,aAAS,SAAS,KAAK;AAAA,MACpB,MAAM,SAAS;AAAA,MACf,YAAY,CAAC,WAAW,aAAa,iBAAiB,aAAa;AAAA,IACtE,CAAC;AAED,sBAAAD,SAAQ,YAAY,CAAC,YAAY,cAAc;AAE5C,UAAK,cAAsB;AAAQ;AACnC,YAAM,CAAC,GAAG,GAAG,GAAG,iBAAiB,QAAI,aAAAE,SAAM,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM;AAC3E,YAAM,mBAAmB,KAAK,cAAc;AAC5C,YAAM,qBAAqB,KAAK,cAAc;AAE9C,eAAS,UAAU,WAAW,EAAG,gBAAgB,IAAI,GAAG,KAAK,MAAM;AAEnE,UAAI,OAAO,sBAAsB,UAAU;AACxC,iBAAS,UAAU,WAAW,EAAG,kBAAkB,IAAI,kBAAkB,QAAQ,CAAC;AAAA,MACrF;AAEA,eAAS,OAAO,SAAS,IAAI,CAAC,EAAE,iBAAiB,aAAa,MAAM;AAEjE,YAAI,CAAC,MAAM,CAAC,YAAY,GAAG;AACxB,iBAAO,WAAW,uBAAuB;AAAA,QAC5C;AAKA,YAAI,iBAAiB;AAClB,iBAAO,WAAW,2BAA2B,2BAA2B;AAAA,QAC3E;AACA,eAAO,WAAW,2BAA2B;AAAA,MAChD;AAAA,IACH,CAAC;AAAA,EACJ,CAAC;AAED,SAAO;AACV;AAEO,IAAM,eAAe,CAAC,SAAwC,CAAC,MAAM;AACzE,QAAM,WAAW,cAAc,MAAM;AAErC,aAAO,cAAAC;AAAA,IACJ,CAAC,EAAE,cAAc,WAAW,MAAM;AAE/B,mBAAa,SAAS,SAAS;AAE/B,eAAS,SAAS,QAAQ,CAAC,YAAY;AACpC,mBAAW,QAAQ,MAAM,QAAQ,UAAU;AAAA,MAC9C,CAAC;AAAA,IACJ;AAAA;AAAA,IAEA;AAAA,MACG,OAAO;AAAA,QACJ,QAAQ;AAAA;AAAA,UAEL,QAAQ,SAAS;AAAA,QACpB;AAAA,MACH;AAAA,IACH;AAAA,EACH;AACH;","names":["forEach","flatten","Color","plugin"]}